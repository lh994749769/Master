buildscript {
    ext.isMaven = { name ->
        Properties properties = new Properties()
        def file = rootProject.file("${name}/maven.properties")
        if (file.exists()) {
            InputStream inputStream = file.newDataInputStream()
            properties.load(inputStream)
            def str = properties.getProperty('MAVEN')
            if (str == null) {
                return false
            } else {
                return Boolean.parseBoolean(str)
            }
        }
        return false
    }
    ext.mavenVersion = { name ->
        println("mavenVersion::${name}")
        Properties properties = new Properties()
        def file = rootProject.file("${name}/maven.properties")
        if (file.exists()) {
            InputStream inputStream = file.newDataInputStream()
            properties.load(inputStream)
            def str = properties.getProperty('VERSION')
            if (str == null) {
                throw Exception(file.path + "    VERSION == null")
            } else {
                return str
            }
        }
        return ""
    }
    ext.projectCompat = { name ->
        def realName = name.replace(":", "")
        if (isMaven(realName)) {
            return "com.ooftf.project.master:${realName}:${mavenVersion(realName)}"
        } else {
            return project(name)
        }
    }
    ext {
        versions = [
                'kotlin'     : '1.4.20',
                'compileSdk' : 29,
                'minSdk'     : 21,
                'targetSdk'  : 26,
                'butterknife': "10.1.0",
                'tinker'     : "1.9.9",
                'tinkerpatch': "1.2.9",
                'packerNG'   : "2.0.1",
                'glide'      : "4.11.0",
                'dagger'     : '2.22.1',
                'java'       : JavaVersion.VERSION_1_8,
                'rxlifecycle': "4.0.1",
                'master'     : "1.0.1-SNAPSHOT"
        ]

        deps = [
                'fastjson'                         : 'com.alibaba:fastjson:1.1.71.android',
                'HiHttp'                           : 'com.ooftf:hi-http:4.2.4',
                'MMKV'                             : 'com.tencent:mmkv-static:1.2.7',
                'progressDrawable'                 : 'com.github.ooftf:progress-drawable:1.2.0',
                'disklrucache'                     : 'com.jakewharton:disklrucache:2.0.2',
                'bugly'                            : 'com.tencent.bugly:crashreport_upgrade:latest.release',
                'dagger2_compiler'                 : "com.google.dagger:dagger-compiler:$versions.dagger",
                'matisse'                          : 'com.zhihu.android:matisse:0.5.2-beta4',
                'CalendarView'                     : 'com.github.ooftf:CalendarView:1.0.5',
                'ARouterCompiler'                  : "com.alibaba:arouter-compiler:1.5.1",
                'ARouterApi'                       : 'com.alibaba:arouter-api:1.5.1',
                'bindingcollectionadapter'         : 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter:3.1.1',
                'bindingcollectionadapter_recycler': 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter-recyclerview:3.1.1',
                'SmartRefreshLayout'               : 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-andx-8',
                'SmartRefreshHeader'               : 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-andx-8',
                'material'                         : 'com.google.android.material:material:1.3.0',

        ]

        androidx = [
                'constraintLayout': 'androidx.constraintlayout:constraintlayout:2.0.4',
                'appcompat'       : 'androidx.appcompat:appcompat:1.2.0',
                'vectordrawable'  : 'androidx.vectordrawable:vectordrawable:1.1.0-beta02',
                'cardview'        : 'androidx.cardview:cardview:1.0.0',
                'recyclerview'    : 'androidx.recyclerview:recyclerview:1.2.0',
                'legacy_v4'       : 'androidx.legacy:legacy-support-v4:1.0.0',
                'legacy_v13'      : 'androidx.legacy:legacy-support-v13:1.0.0',

        ]
        test = [
                'junit'   : 'junit:junit:4.12',
                'runner'  : 'androidx.test:runner:1.2.0',
                'espresso': 'androidx.test.espresso:espresso-core:3.2.0',
        ]
        versions.kotlin = '1.4.32'
    }
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven {
            url "https://dl.bintray.com/ooftf/maven"
        }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        // classpath "com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:$versions.tinkerpatch"
        classpath ("com.tencent.matrix:matrix-gradle-plugin:${MATRIX_VERSION}") { changing = true }
        classpath "com.mcxiaoke.packer-ng:plugin:$versions.packerNG"
        classpath "com.alibaba:arouter-register:1.0.2"
        classpath 'com.ooftf:autoregister:1.4.3'
        classpath 'com.ooftf:plugin-task-time:1.0.0'
        classpath 'com.didichuxing.doraemonkit:dokitx-plugin:3.3.5'
    }

}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        google()
        maven { url 'https://jitpack.io' }
        //mavenLocal()
        maven() {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven { url "https://dl.bintray.com/thelasterstar/maven/" }
        maven {
            url "https://dl.bintray.com/ooftf/maven"
        }
        maven {
            url "https://dl.bintray.com/ooftf/image"
        }
        maven {
            url 'http://dl.bintray.com/amulyakhare/maven'
        }
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            credentials {
                username '5f0eaf7299d2094b1a8c6600'
                password 'JWiB]Owny)E7'
            }
            url 'https://packages.aliyun.com/maven/repository/2017033-release-61klBZ/'
        }
        maven {
            credentials {
                username 'XeiNW4'
                password 'RR3XPNBSd2'
            }
            url 'https://repo.rdc.aliyun.com/repository/78416-release-TOhjiY/'
        }
        maven {
            credentials {
                username 'XeiNW4'
                password 'RR3XPNBSd2'
            }
            url 'https://repo.rdc.aliyun.com/repository/78416-snapshot-YPE3KZ/'
        }
        maven {url 'http://developer.huawei.com/repo/'}
    }

}
task clean(type: Delete) {
    delete rootProject.buildDir
}
def publishTask = task(group: 'publish', publishAll) {

}
gradle.addBuildListener(new BuildListener() {
    void buildStarted(Gradle var1) {
        println '【开始构建】'
    }

    void settingsEvaluated(Settings var1) {
        // 注意：在这里不能访问 var1.gradle.rootProject，因为 Project 还没有初始化
        println '【settings.gradle 解析完成】'
    }

    void projectsLoaded(Gradle var1) {
        println '【初始化阶段结束】'
    }

    void projectsEvaluated(Gradle var1) {
        println '【配置阶段结束】'
        var1.allprojects { childProject ->
            def childTask = childProject.tasks.findByName('publish')
            if (childTask != null) {
                publishTask.dependsOn(childProject.tasks.findByName('publish'))
            }
        }
    }

    void buildFinished(BuildResult var1) {
        println '【构建过程结束】'
    }
})
